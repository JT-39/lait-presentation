---
title: You're Never Too *LAIT* To Start
subtitle: Building Production Grade Shiny Apps
title-slide-attributes:
  data-background-position: top
  data-background-image: images/sanctuary-buildings.jpg
  data-background-size: cover
  data-background-opacity: "0.1"
authors:
  - Jake Tufts
execute: 
  echo: true
revealjs-plugins:
  - revealjs-text-resizer
filters:
    - shinylive
---

## Overview

-   LAIT's Background
-   Planning a Shiny App
-   Development & Coding
-   Deployment & User Testing

:::{.notes}
TODO: Add notes (throughout) TODO: Add mini segments (and links to the slides?) TODO: Change font-size (throughout) TODO: Add emojis (throughout) TODO: Add fade-ins (throughout) TODO: Add borders to pictures and re-siz TODO: Link back to LAIT rather than generic
:::
------------------------------------------------------------------------

## LAIT's background {.center}

:::{.notes}
TODO: Add an image?
:::
------------------------------------------------------------------------

## Original LAIT

::::: columns
::: {.column width="45%"}
- Released in 2007

- Built as an Excel workbook using macros

- Developed and coded by an SEO

- LAs have a consistent data source

![LAIT's Excel front-page](images/original_lait_content_page.png)
:::

::: {.column width="50%"}
![LA View of the original LAIT](images/original_lait_la_context.png)
:::
:::::

------------------------------------------------------------------------

## A problem... {.center}

:::{.notes}
TODO: Add an image?
:::

------------------------------------------------------------------------

## ... LAIT is taken off GOV.UK

::::: columns
::: column
::: fragment
In 2018, new regulations set a legal duty for public sector bodies to make all web or app content accessible, with only a few limited exceptions.
<br>
<br>
<br>
<br>

:::
::: fragment
- Regardless of disability, setting or technology, all users should be able to access our content.
<br>
<br>
- LAIT given an exemption due to its importance to LAs.
<br>
<br>
- In 2024, exemption lifted and LAIT removed‚Ä¶

:::
:::

::: column
![](images/understanding_wcag.png)
:::
:::::

------------------------------------------------------------------------

## A Shiny Light at the End of the Tunnel

::::: columns
::: column
::: fragment
Our G7 put in significant work to get this project prioritised.
<br>
<br>
<br>
<br>

:::
::: fragment
- Shiny identified as the best option:
  - Cheapest
  - Expertise in the wider unit (RG Data Science)
  - Capable software
  - Process setup for deploying to public
  - In-house and open code/data
:::
:::

::: column
![](images/shiny_vs_options.png)
:::
:::::

------------------------------------------------------------------------

## You Wouldn't Wing A Project {.center}

::::: columns
::: column
Planning Your Work
:::

::: column
![](images/you_wouldnt_edit_a_meme.jpg)
:::
:::::

::: notes
-   Lucky as had a template from the original LAIT.
-   But, planning and pre-development work is crucial to a successful app.
-   Breakdown the task into small manageable chunks.
:::
------------------------------------------------------------------------

## Ask Yourself (And Others) Why?

::::: columns
::: column
::: fragment
Who are the users? <br><br>
:::
::: fragment
What are the use cases?
:::
::: fragment
<br> <br>

[*... this informs:*]{style="font-size: 1.5em;"}
:::
::: fragment
<br>

**The Product:** Is an app actually needed? <br><br>
:::
::: fragment
**Content:** What data shall I include? <br><br>
:::
::: fragment
**Functionality:** How do I make this work? <br><br>
:::
::: fragment
**Timelines:** When are my deadlines?
:::
:::

::: column
![](images/xkcd-overengineer.png){width="764"}
:::
:::::

::: notes
TODO: Link back to LAIT?
-   Really important you create something that will be used.
-   Ensures buy-in.
-   Helps direct development past the initial (easy part) idea.
:::
------------------------------------------------------------------------

## Step Outside The World Of Code

::::: columns
::: column
-   Workshops
-   Minimum Viable Products (MVPs)
-   Brainstorming/System-thinking

::: fragment
![LAIT MVP](images/lait_mvp.png)
:::
:::

::: column
::: fragment
![Lucid Chart Workshop Example](images/lucid_chart_workshop_example.png){width="790"}
:::
:::
:::::

::: notes
-   Not my favourite part, but actually very useful for answering the important Qs.
-   Normally leads to more interest, more ideas and overall a better product.
-   Gives protection around collaborating with stakeholders.
:::
------------------------------------------------------------------------

## Build the Scaffolding

::::: columns
::: column
::: fragment
-   Breakdown the content, **modularise** the app
:::
::: fragment
-   Choose your charts, finalise functionality
:::
::: fragment
<br>
<br>

-   Back-end is your beating heart üíì
    -   What is the data source?
    -   How often is this updated?
    -   Automate for future you

:::
:::

::: column
![](images/scaffolding.jpg){width="600"}
:::
:::::

::: notes
-   Plan your essay. Plan your code. Builds a mental picture of the code structure.
-   Good documentation.
-   Can refer back to when in 2nd phase of development (or the app has grown in complexity).
:::
------------------------------------------------------------------------

## Get Creative - Pictures are Worth a 1000 Words

::::: columns
::: column
::: fragment
-   Sketch the app layout
-   Code process maps
:::
::: fragment
![Code Process Map](images/example-process-map.jpg)

![Example App Flow Diagram](images/moj-app-flow-example.svg)
:::
:::

::: column
::: fragment
![Example Sketch of the Dashboard](images/sketch_dashboard_example.png)
:::
:::
:::::

::: notes
-   Good documentation.
-   Digestible for non-technical/new-starters.
-   Identify difficulties/bottle-necks early.
-   Breakdown the code into segments making it easy to compose prompts for AI.
:::
------------------------------------------------------------------------

## PM's Get the Big Bucks ü™ô

::::: columns
::: {.column width="45%"}
::: {.fragment}
-   High-level overarching timeline
-   Start small with a detailed development timeline

![Example of a software development roadmap](images/code-roadmap-example.png)
:::
:::
::: {.column width="10%"}
:::
::: {.column width="45%"}
::: {.fragment}
-   Version Control is a MUST, utilise their PM tools
-   Don't forget your Eureka moments!

![LAIT's GitHub issues](images/lait_github_issues.png)
:::
:::
:::::

::: notes
-   VC is a lifesaver - so many times went down a rabbit hole and could easily get back.
-   Coding/Software best practice.
-   Enables efficient collaboration.
:::

------------------------------------------------------------------------

## Is There A Skip Intro Button? {.center}

:::::: columns
::: column
Coding and Developing a Shiny App
:::

:::: column
::: {style="text-align: right;"}
<a href="#" id="skip-intro" class="govuk-button" style="
    background-color: #1d70b8;
    color: white;
    padding: 10px 20px;
    font-family: 'GDS Transport', Arial, sans-serif;
    font-size: 2rem;
    text-decoration: none;
    border: none;
    display: inline-block;
    border-radius: 6px;
    cursor: pointer;
  "> ‚è© Skip Intro </a>

:::
::::
::::::
:::{.notes}
- You've probably wanted to skip to the technical detail and I don't blame you, its the fun part!
- But, putting the work in for the setup is worth it.
:::

------------------------------------------------------------------------

## What Is Shiny?

::: {.columns}
::: {.column}
::: fragment
`{shiny}` is an R package to easily build interactive apps
<br>
<br>
It connects user inputs (like sliders, text boxes, buttons) to reactive outputs (like plots, tables, summaries).
<br>
<br>
Or in the `{shiny}` language the UI to the server.
<br>
<br>

:::
::: fragment
Languages usually required to code websites are neatly packaged up into R functions:

- JavaScript
- HTML
- CSS
:::
::: fragment
Shiny apps can be:

- Used locally on your computer
- Deployed to servers, Posit Connect/shinyapps.io or GitHub
:::
:::
::: {.column}
::: panel-tabset

#### Simple Shiny App

```{shinylive-r}
#| standalone: true
#| viewerHeight: 655
req_pkgs <- FALSE

if(req_pkgs) {
  library(shinylive)
}

# Define UI
ui <- shiny::fluidPage(
  
  shiny::titlePanel("Simple Shiny App"),
  
  shiny::sidebarLayout(
    shiny::sidebarPanel(
      shiny::sliderInput(
        inputId = "num_points",
        label = "Number of random points:",
        min = 10,
        max = 1000,
        value = 100
      )
    ),
    
    shiny::mainPanel(
      shiny::plotOutput(outputId = "scatter_plot")
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  
  output$scatter_plot <- shiny::renderPlot({
    x <- rnorm(input$num_points)
    y <- rnorm(input$num_points)
    plot(x, y, main = paste("Scatterplot with", input$num_points, "points"),
         xlab = "X", ylab = "Y", pch = 19, col = "steelblue")
  })
}

# Run the app
shiny::shinyApp(ui = ui, server = server)
```

#### Code

```r
# Define UI
ui <- shiny::fluidPage(
  
  shiny::titlePanel("Simple Shiny App"),
  
  shiny::sidebarLayout(
    shiny::sidebarPanel(
      shiny::sliderInput(
        inputId = "num_points",
        label = "Number of random points:",
        min = 10,
        max = 1000,
        value = 100
      )
    ),
    
    shiny::mainPanel(
      shiny::plotOutput(outputId = "scatter_plot")
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  
  output$scatter_plot <- shiny::renderPlot({
    x <- rnorm(input$num_points)
    y <- rnorm(input$num_points)
    plot(x, y, main = paste("Scatterplot with", input$num_points, "points"),
         xlab = "X", ylab = "Y", pch = 19, col = "steelblue")
  })
}

# Run the app
shiny::shinyApp(ui = ui, server = server)
```

:::
:::
:::

:::{.notes}
TODO: Use a LAIT example?
:::
------------------------------------------------------------------------

## Shiny Modules - What Are They?

:::{.notes}
TODO: Namespaces, watch the video and read the 2 articles
:::

------------------------------------------------------------------------

## Shiny Modules - Pros & Cons

Modules are essentially the functions of Shiny

::::: columns
::: column
::: fragment

<p style="color:#00703c;"><strong>Pros:</strong></p>

-   Best practice
-   Breaks the app down into smaller segments
-   Permits collaboration
-   Colleagues can pick-up faster
-   Re-usable
-   Easy to test/de-bug
:::
::: fragment

<p style="color:#d4351c;"><strong>Cons:</strong></p>

-   Initial learning curve
-   Overly complex for smaller apps
-   Requires good code management
-   Sharing reactive values between modules is more involved
:::
:::

::: column
![](images/lego_titanic_instructions.jpg)
:::
:::::
------------------------------------------------------------------------

## Shiny Modules - My workflow

Start easy. Get it working. Finesse.
<br>
<br>
<br>
<br>

::::: columns
::: column
::: fragment
1.  Start in plain R
<br>
<br>

:::
::: fragment
2.  Get this working as a mini app
<br>
<br>

:::
::: fragment
3.  Finesse the app into Shiny modules
<br>
<br>

:::
::: fragment
Find a workflow that suits you
:::

:::

::: column
![](images/shiny_modules_workflow.png){width="1071"}
:::
:::::

------------------------------------------------------------------------

## Shiny Modules - How To Build 

Allow you to box the UI and server code together into "mini apps" inside your main app. üì¶

Each module has:

:::::: {.columns}
::: {.column}
:::fragment

#### Module UI function

```r
randomPlotUI <- function(id) {
  ns <- shiny::NS(id)  # Namespace to avoid conflicts
  shiny::tagList(
    shiny::sidebarLayout(
      shiny::sidebarPanel(
        shiny::sliderInput(
          inputId = ns("num_points"),
          label = "Number of random points:",
          min = 10,
          max = 1000,
          value = 100
        )
      ),
      
      shiny::mainPanel(
        shiny::plotOutput(outputId = ns("scatter_plot"))
      )
    )
  )
}
```
:::
:::
::: {.column}
::: fragment

#### Module Server function

```r
randomPlotServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
  output$scatter_plot <- shiny::renderPlot({
    x <- rnorm(input$num_points)
    y <- rnorm(input$num_points)
    plot(x, y, main = paste("Scatterplot with", input$num_points, "points"),
         xlab = "X", ylab = "Y", pch = 19, col = "steelblue")
  })
}
```
:::
:::
:::

------------------------------------------------------------------------

## Shiny Modules - How To Build

Now use the modules in the typical Shiny layout:


:::::: {.columns}
::: {.column}
```r
# Main UI
ui <- shiny::fluidPage(
  mod_plot_ui("randomPlot1")
)

# Main Server
server <- function(input, output, session) {
  mod_plot_server("randomPlot1")
}

# Run the app
shinyApp(ui, server)
```
:::
::: {.column}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

# UI module
randomPlotUI <- function(id) {
  ns <- shiny::NS(id)  # Namespace to avoid conflicts
  shiny::tagList(
    shiny::sidebarLayout(
      shiny::sidebarPanel(
        shiny::sliderInput(
          inputId = ns("num_points"),
          label = "Number of random points:",
          min = 10,
          max = 1000,
          value = 100
        )
      ),
      
      shiny::mainPanel(
        shiny::plotOutput(outputId = ns("scatter_plot"))
      )
    )
  )
}

# Server module
randomPlotServer <- function(id) {
  shiny::moduleServer(id, function(input, output, session) {
  output$scatter_plot <- shiny::renderPlot({
    x <- rnorm(input$num_points)
    y <- rnorm(input$num_points)
    plot(x, y, main = paste("Scatterplot with", input$num_points, "points"),
         xlab = "X", ylab = "Y", pch = 19, col = "steelblue")
  })
}

# Main UI
ui <- shiny::fluidPage(
  shiny::titlePanel("Simple Shiny App"),
  mod_plot_ui("plot1")
)

# Main Server
server <- function(input, output, session) {
  mod_plot_server("plot1")
}

# Run the app
shiny::shinyApp(ui, server)
```
:::
:::


------------------------------------------------------------------------

## Shiny Modules - LAIT's Model Modules

:::{.notes}
TODO: Show the user selection modules being reused?
:::

------------------------------------------------------------------------

## `{shinytest2}`

::: {.columns}
::: {.column}
:::fragment
I know we all test our functions, so why stop there?
:::
::: fragment
-   Test the server
-   Test UI
-   Made easy with Shiny modules
:::
::: fragment
![Running `shinytest::test_app()` in LAIT](images/lait_shinytest_pass.png){height="400px"}
:::
:::
::: {.column}
::: fragment
:::{.panel-tabset}
#### Server Test
```r
# BDS_FilteredServer() --------------------------------------------------------
test_that("1. BDS_FilteredServer correctly filters bds_metrics", {
  # Simulate the app_inputs object with reactive values
  app_inputs <- shiny::reactiveValues(
    topic = reactive({
      "Economic Factors"
    }),
    indicator = reactive({
      "Percentage of children in low income families"
    })
  )

  shiny::testServer(BDS_FilteredServer, args = list(app_inputs, bds_metrics), {
    # Trigger the observeEvent by setting the indicator input
    session$flushReact()

    # Retrieve the filtered data
    filtered_data <- session$returned()

    # Expected result based on the mock data
    expected_data <- bds_metrics |>
      dplyr::filter(
        Topic == "Economic Factors",
        Measure == "Percentage of children in low income families"
      )

    # Test that the filtered data matches the expected result
    testthat::expect_equal(filtered_data, expected_data)
  })
})
```

#### UI Test
```r
# Start an app running
app <- AppDriver$new(
  name = "basic_load",
  height = 846,
  width = 1445,
  load_timeout = 100 * 1000,
  timeout = 60 * 1000,
  wait = TRUE,
  options = list(test.mode = TRUE),
  expect_values_screenshot_args = FALSE # Turn off as we don't need screenshots
)

# Wait until Shiny is not busy for 5ms so we know any processes are complete
app$wait_for_idle(5)

# Test that the app will start up without error
# Checks that the title is as expected
testthat::test_that("App loads and title of app appears as expected", {
  testthat::expect_equal(
    app$get_text("title"),
    # This is the title of the app on load, you should change to match your app's title
    # The app title is usually set early on in the ui.R script or through a variable in the global.R script
    paste0(
      "Local Authority Interactive Tool (LAIT) - LA Level: ",
      "Barking and Dagenham, A level cohort Average point score per entry"
    )
  )
})

app$stop()
```
:::
:::
:::
:::

------------------------------------------------------------------------

## DfE's `shiny-template`

Out-the-box GOV.UK styled Shiny app.
<br>
<br>

::: {.columns}
::: {.column}
::: fragment
-   Professional aesthetic
<br>
<br>
-   Users trust and are familiar with the UI
<br>
<br>
-   Meets accessibility standards
<br>
<br>
-   Continuously improved
<br>

<br>

:::
::: fragment
[https://github.com/dfe-analytical-services/shiny-template](https://github.com/dfe-analytical-services/shiny-template)
:::
:::
::: {.column}
![](images/shiny-template.png)
:::
:::

------------------------------------------------------------------------

## `{shinyGovstyle}` and `{dfeshiny}`

GOV.UK styled UI elements and helpful functions to handle Shiny housekeeping

::: {.columns}
::: {.column}
::: fragment
`shinyGovstyle::button_Input("default")`,
<br>

`shinyGovstyle::button_Input("start")`,
<br>

`shinyGovstyle::button_Input("warning")`

:::
::: fragment
![](images/shinyGovstyle-buttons.png)
:::
:::
::: {.column}
::: fragment
` dfeshiny::dfe_cookies_script()`, `dfeshiny::cookies_banner_ui()`
![](images/dfeshiny-cookies.png)
:::
::: fragment
`a11y_panel()`
![](images/dfeshiny-support-panel.png)
:::
:::
:::

:::{.notes}
TODO: Pick out some nice examples of these packages (LAIT related?)
-   {bslib} for slick web design
-   Notifications and Tags
-   Cookies and Accessibility note
:::

------------------------------------------------------------------------

## `{afcharts}` and `{ggiraph}`

Combine Analysis Function approved charts with an accessible **interactive** charting framework

::: fragment
TODO: Pick out some nice examples of these packages (LAIT related?)
:::

------------------------------------------------------------------------

## `{dfeR}`

A host of handy functions managed by DfE analysts

::: {.columns}
::: {.column width="33%"}
::: fragment
Up-to-date geographies

```{r}
dfeR::fetch_las() |>
 head()
```
:::
:::
::: {.column width="33%"}
::: fragment
Prettifying numbers

```{r}
dfeR::pretty_num(
  1125678,
  dp = 2,
  gbp = TRUE
)
```
:::
:::
::: {.column width="33%"}
::: fragment
Create R projects pre-populated with best practice structure all the necessary files

```r
dfeR::create_project()
```

![](images/)
:::
:::
:::

:::

:::{.notes}
TODO: Pick out some nice examples of these packages (LAIT related?)
:::

------------------------------------------------------------------------

## Useful guidance

-   Analysis Function Guidance Hub
-   Engineering Production Grade Shiny Apps
-   AI
-   Appsilon
-   Take inspiration from other apps
- Shiny modules/Shinyconf

:::{.notes}
TODO: Add links + more?
:::

------------------------------------------------------------------------

## Reactivity Spaghetti Junction
Reactive objects are the drivers of interactivity in Shiny
<br>
<br>
`shiny::sliderInput()`

::: {.columns}
::: {.column}
::: fragment
However, as your apps get more complex reactivity can become a headache

Especially when multiple inputs can update each other, leads to endless loops
:::
::: fragment
Try to keep things simple

Map out how your different user inputs interact
:::
:::
::: {.column}
:::
:::

:::{.notes}
TODO: Add LAIT example/ how you can combat this?
:::

------------------------------------------------------------------------

## FUNctionality - Sky's the Limit

Coding is just really problem solving. Like LEGO you can build anything you put your mind to.

:::::: columns
:::: column
::: fragment
**Copy-to-clipboard**

::: panel-tabset
#### JS

``` js
$(document).ready(function () {
  // General function to handle image copying
  async function copyImage(namespace) {
    const buttonId = `#${namespace}-copybtn`;
    const imageContainerId = `#${namespace}-copy_plot`;

    const src = $(`${imageContainerId}>img`).attr("src");
    if (!src) {
      alert("No image source found!");
      return;
    }
    try {
      const blob = await getImageBlobFromUrl(src);
      await navigator.clipboard.write([
        new ClipboardItem({
          [blob.type]: blob
        })
      ]);
      Shiny.setInputValue("copy-to-clipboard-success", true, {priority: "event"});
    } catch (err) {
      console.error(err.name, err.message);
      Shiny.setInputValue("copy-to-clipboard-failure", true, {priority: "event"});
    }
  }
```

#### Demo

![](images/lait_copy_to_clipboard.mp4)
:::
:::
::::

::: column
::: fragment
**Create Your Own**

![](images/create_your_own.png)

TODO: Add a video of the Create Your Own page
:::
:::
::::::

------------------------------------------------------------------------

## Shout, Shout, Let It All Out {.center}

::::: columns
::: column
Deployment and User Testing
:::

::: column
![These are the things we CAN'T live without üé∂](images/shout-single.jpg)
:::
:::::

::: notes
-   Now you have an app that works, serves the use case and you are proud of.
-   But how to share this with your users!?
-   Before live deploying we must do user testing... but this comes hand-in-hand with deployment.
-   Must identify what needs the app has for deployment and hosting.
    -   Internal Vs External
    -   Number of users and size of the app
    -   Cost
-   Test early so that pick-up any issues before they become major headaches.
-   Then continue to test throughout development - idea of Continuous Integration.
:::

------------------------------------------------------------------------

## Deployment Options üíª

The solution to your deployment dilemma depends upon your:

::: fragment
- Audience (and access) üîê
- Technical expertise ‚öôÔ∏è
- Resource available (time & money) ‚åõ
<br>
<br>
<br>

:::
::: fragment
:::{.deployment-table}

| **Option**              | **Authentication**                          | **Security**                                        | **Scaling**                                         | **Ops Overhead**                          | **Investment**                            | **Hosting Options**                                              |
|-------------------------|---------------------------------------------|-----------------------------------------------------|-----------------------------------------------------|-------------------------------------------|-------------------------------------------|------------------------------------------------------------------|
| **Vanilla Shiny**       | None by default; requires external solution | Depends on hosting platform and setup               | Manual; complex if session management is required   | High; requires infra & scaling expertise  | Time, effort, infrastructure costs         | Direct VM, unmanaged/managed containers                           |
| <span style="color:#F46A25;"><strong>Shinyapps.io</strong></span> | <span style="color:#F46A25;"><strong>Built-in (limited); no external integration</strong></span> | <span style="color:#F46A25;"><strong>Shared platform; data/code hosted externally</strong></span> | <span style="color:#F46A25;"><strong>Limited by tier (runtime hours, users)</strong></span> | <span style="color:#F46A25;"><strong>Very low; no infra required</strong></span> | <span style="color:#F46A25;"><strong>Subscription-based (free ‚Üí professional)</strong></span> | <span style="color:#F46A25;"><strong>Fully managed by Posit</strong></span> |
| **Shiny Server (OSS)**  | None by default; external or code-based     | Self-managed; depends on hosting practices           | No auto-scaling; single process per app             | Medium; simpler than Vanilla Shiny         | Free (open-source); hosting effort needed   | Direct VM, containerized (self-managed)                          |
| **Posit Connect**       | Full enterprise support; many options       | Self-managed; highly robust                          | Multi-user, multi-process auto-scaling              | Low; designed for ease of maintenance      | Paid license (per server/user)             | Direct VM, Kubernetes (off-host execution supported)             |
| **GitHub Pages + ShinyLive**| None (public)                            | Static site; JS/WebAssembly runs client-side         | Infinite (browser-based; depends on client resources)| Very low; simple static site deployment     | Free (GitHub); time to package app         | GitHub Pages + ShinyLive tooling                                 |

:::
:::

:::{.notes}
TODO: Get rid of Kubernetes? What about Dockerized containers like Rich mentioned
:::

------------------------------------------------------------------------

## Continuous Integration

::: {.columns}
::: {.column}
Practice of merging code into the test/live area regularly.
<br>
<br>
Helps detect and resolve issues early, leading to faster development and higher quality.
<br>
<br>

::: fragment
Examples of CI:

-   Git Hooks
-   Automated linting
-   Automated tests
-   Immediate build and deployment
:::
::: fragment
CI is setup using `.yaml` files and harnessing automated workflows like **GitHub Actions**.
:::
:::
::: {.column}
The LAIT's [`deploy-shiny.yaml` GitHub workflow](https://github.com/dfe-analytical-services/local-authority-interactive-tool/blob/main/.github/workflows/deploy-shiny.yaml)

```yaml
on:
  push:
    branches:
      - main

name: Shinyapps.io deploy

jobs:
  deployShiny:
    runs-on: ubuntu-latest

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Check out repository
      - uses: actions/checkout@v4

      - name: Set up R
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: '4.4.1'
          use-public-rspm: true

      - name: Set env vars (prod)
        run: |
          echo "SHINYAPP_NAME='local-authority-interactive-tool'">> $GITHUB_ENV

      - name: Restore renv snapshot
        shell: Rscript {0}
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          renv::restore()

      - name: Install rsconnect
        shell: Rscript {0}
        run: |
          if (!requireNamespace("renv", quietly = TRUE)) install.packages("renv")
          renv::install("rsconnect")

      - name: Push to shiny.io
        run: >
          Rscript
          -e "rsconnect::setAccountInfo(name = 'department-for-education', token = '${{secrets.SHINYAPPS_TOKEN}}', secret = '${{secrets.SHINYAPPS_SECRET}}')"
          -e "rsconnect::deployApp(appName=${{env.SHINYAPP_NAME}}, forceUpdate = TRUE)"
```
:::
:::

:::{.notes}
TODO: Add the LAIT .yaml file and explain how it works?
:::
------------------------------------------------------------------------

## User Testing

::: {.columns}
::: {.column}
Absolutely crucial. Should be done ASAP and throughout.
<br>
<br>

::: fragment
But... I see "user testing" as receiving feedback from anyone:
:::
::: fragment
- Team member
- Non-technical colleague
- External users
:::
::: fragment
![LAIT In-App Feedback](images/lait-app-feedback-form.png)
:::

:::
::: {.column}
![User Testing Feedback Form](images/lait-feedback-form.png)
:::
:::

:::{.notes}
- Produce and use MVPs to do this (in a workshop or even over the shoulder).
- Try and do at least one round of user testing on your expected cohort. Use surveys to collect feedback, leave questions open ended and be ready to get little feedback.
:::
------------------------------------------------------------------------

## Proof Is In The Pudding

LAIT is the DfE's 2nd most used external Shiny app (by unique users)

TODO: Plot of the top externally used apps (if allowed - check with Cam)

------------------------------------------------------------------------

## Knight In Shining Armour

You've done it...

::: fragment
-   Investigated and confirmed the need for a Shiny app.
:::
::: fragment
-   Sketched out maps to plan your development and guide timelines/milestones.
:::
::: fragment
-   Used Shiny best practice to build a modular structure.
:::
::: fragment
-   Harnessed the government Shiny frameworks to produce GOV.UK accessible content.
:::
::: fragment
-   Ensured the user's experience is stress free with custom functions, available R packages and seamless interactivity.
:::
::: fragment
-   Designed and executed cool new functionality which warrants the use of Shiny and shows off your coding and creativity.
:::
::: fragment
-   Chosen the right method to deploy.
:::
::: fragment
-   Engaged with users throughout, adjusting content on the go.
:::

... successfully and skillfully developed, deployed (and will maintain) an excellent, accessible, sustainable Shiny app.

:::{.notes}
TODO: Add the emojis
:::

------------------------------------------------------------------------

## Useful Links

-   https://user-guidance.analytical-platform.service.justice.gov.uk/apps/rshiny-app.html#overview

:::{.notes}
TODO: Add links
::: -->
