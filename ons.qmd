---
title: You're Never Too *LAIT* To Start
subtitle: Building Production Grade Shiny Apps
title-slide-attributes:
  data-background-position: top
  data-background-image: images/sanctuary-buildings.jpg
  data-background-size: cover
  data-background-opacity: "0.1"
authors:
  - Jake Tufts
execute: 
  echo: true
revealjs-plugins:
  - revealjs-text-resizer
filters:
    - shinylive
---

## Overview

-   LAIT's Background
-   Planning a Shiny App
-   Development & Coding
-   Deployment & User Testing

TODO: Add notes (throughout) TODO: Add mini segments (and links to the slides?) TODO: Change font-size (throughout) TODO: Add emojis (throughout) TODO: Add fade-ins (throughout) TODO: Add borders to pictures and re-size

------------------------------------------------------------------------

## LAIT's background {.center}

------------------------------------------------------------------------

## Original LAIT

::::: columns
::: {.column width="45%"}
-   [Released in 2007]{style="font-size: 1.25em;"}

- Built as an Excel workbook using macros

-   [Developed and coded by an SEO]{style="font-size: 1.25em;"}

-   [LAs have a consistent data source]{style="font-size: 1.25em;"}

![LAIT's Excel front-page](images/original_lait_content_page.png)
:::

::: {.column width="50%"}
![LA View of the original LAIT](images/original_lait_la_context.png)
:::
:::::

------------------------------------------------------------------------

## A problem... {.center}

------------------------------------------------------------------------

## ... LAIT is taken off GOV.UK

::::: columns
::: column
```         
¬†
```

-   [In 2018, new regulations set a legal duty for public sector bodies to make all web or app content accessible, with only a few limited exceptions.]{style="font-size: 1.25em;"}

    ¬†

-   [Regardless of disability, setting or technology, all users should be able to access our content.]{style="font-size: 1.25em;"}

    ¬†

-   [LAIT given an exemption due to its importance to LAs.]{style="font-size: 1.25em;"}

    ¬†

-   [In 2024, exemption lifted and LAIT removed‚Ä¶]{style="font-size: 1.25em;"}
:::

::: column
![](images/understanding_wcag.png)
:::
:::::

------------------------------------------------------------------------

## A Shiny Light at the End of the Tunnel

::::: columns
::: column
```         
¬†
```

-   [Our G7 put in significant work to get this project prioritised.]{style="font-size: 1.25em;"}

    ¬†

    ¬†

-   [Shiny identified as the best option:]{style="font-size: 1.25em;"}

    -   [Cheapest]{style="font-size: 1.25em;"}

    -   [Expertise in the wider unit (RG Data Science)]{style="font-size: 1.25em;"}

    -   [Capable software]{style="font-size: 1.25em;"}

    -   [Process setup for deploying to public]{style="font-size: 1.25em;"}

    -   [In-house and open code/data]{style="font-size: 1.25em;"}
:::

::: column
![](images/shiny_vs_options.png)
:::
:::::

------------------------------------------------------------------------

## You Wouldn't Wing A Project {.center}

::::: columns
::: column
[Planning Your Work]{style="font-size: 1.25em;"}
:::

::: column
![](images/you_wouldnt_edit_a_meme.jpg)
:::
:::::

::: notes
-   Lucky as had a template from the original LAIT.
-   But, planning and pre-development work is crucial to a successful app.
-   Breakdown the task into small manageable chunks.
:::

------------------------------------------------------------------------

## Ask Yourself (And Others) Why?

::::: columns
::: column
::: fragment
[Who are the users?]{style="font-size: 1.25em;"} <br><br>
:::
::: fragment
[What are the use cases?]{style="font-size: 1.25em;"}
:::
::: fragment
<br> <br>

[*... this informs:*]{style="font-size: 1.5em;"}
:::
::: fragment
<br>

[**The Product:** Is an app actually needed?]{style="font-size: 1.25em;"} <br><br>
:::
::: fragment
[**Content:** What data shall I include?]{style="font-size: 1.25em;"} <br><br>
:::
::: fragment
[**Functionality:** How do I make this work?]{style="font-size: 1.25em;"} <br><br>
:::
::: fragment
[**Timelines:** When are my deadlines?]{style="font-size: 1.25em;"}
:::
:::

::: column
![](images/xkcd-overengineer.png){width="764"}
:::
:::::

::: notes
TODO: Link back to LAIT?
-   Really important you create something that will be used.
-   Ensures buy-in.
-   Helps direct development past the initial (easy part) idea.
:::

------------------------------------------------------------------------

## Step Outside The World Of Code

::::: columns
::: column
-   Workshops
-   Minimum Viable Products (MVPs)
-   Brainstorming/System-thinking

![LAIT MVP](images/lait_mvp.png)
:::

::: column
![Lucid Chart Workshop Example](images/lucid_chart_workshop_example.png){width="790"}
:::
:::::

::: notes
-   Not my favourite part, but actually very useful for answering the important Qs.
-   Normally leads to more interest, more ideas and overall a better product.
-   Gives protection around collaborating with stakeholders.
:::

------------------------------------------------------------------------

## Build the Scaffolding

::::: columns
::: column
-   Breakdown the content, **modularise** the app
-   Choose your charts, finalise functionality
-   Back-end is your beating heart üíì
    -   What is the data source?
    -   How often is this updated?
    -   Automate for future you
:::

::: column
![](images/scaffolding.jpg){width="600"}
:::
:::::

::: notes
-   Plan your essay. Plan your code. Builds a mental picture of the code structure.
-   Good documentation.
-   Can refer back to when in 2nd phase of development (or the app has grown in complexity).
:::

------------------------------------------------------------------------

## Get Creative - Pictures are Worth a 1000 Words

::::: columns
::: column
-   Sketch the app layout
-   Code process maps

![Code Process Map](images/example-process-map.jpg)
![Example App Flow Diagram](images/moj-app-flow-example.svg)
:::

::: column
![Example Sketch of the Dashboard](images/sketch_dashboard_example.png)
:::
:::::

::: notes
-   Good documentation.
-   Digestible for non-technical/new-starters.
-   Identify difficulties/bottle-necks early.
-   Breakdown the code into segments making it easy to compose prompts for AI.
:::

------------------------------------------------------------------------

## PM's Get the Big Bucks ü™ô

::::: columns
::: column
-   High-level overarching timeline
-   Start small with a detailed development timeline

![Example of a software development roadmap](images/code-roadmap-example.png)
:::

::: column
-   Version Control is a MUST, utilise their PM tools
-   Don't forget your Eureka moments!

![LAIT's GitHub issues](images/lait_github_issues.png)
:::
:::::

::: notes
-   VC is a lifesaver - so many times went down a rabbit hole and could easily get back.
-   Coding/Software best practice.
-   Enables efficient collaboration.
:::

------------------------------------------------------------------------

## Is There A Skip Intro Button? {.center}

:::::: columns
::: column
Coding and Developing a Shiny App
:::

:::: column
::: {style="text-align: right;"}
<a href="#" id="skip-intro" class="govuk-button" style="
    background-color: #1d70b8;
    color: white;
    padding: 10px 20px;
    font-family: 'GDS Transport', Arial, sans-serif;
    font-size: 2rem;
    text-decoration: none;
    border: none;
    display: inline-block;
    border-radius: 6px;
    cursor: pointer;
  "> ‚è© Skip Intro </a>

:::
::::
::::::

------------------------------------------------------------------------

## What Is Shiny?

::: {.columns}
::: {.column}
`{shiny}` is an R package to easily build interactive apps

It connects user inputs (like sliders, text boxes, buttons) to reactive outputs (like plots, tables, summaries).

Languages usually required to code websites are neatly packaged up into R functions:

- JavaScript
- HTML
- CSS

Shiny apps can be:

- Used locally on your computer
- Deployed to servers, Posit Connect/shinyapps.io or GitHub

:::
::: {.column}

::: panel-tabset
#### Simple Shiny App
```{shinylive-r}
#| standalone: true
#| viewerHeight: 675

# Load the Shiny package
library(shiny)

# Define UI
ui <- fluidPage(
  
  titlePanel("Simple Shiny App"),
  
  sidebarLayout(
    sidebarPanel(
      sliderInput(
        inputId = "num_points",
        label = "Number of random points:",
        min = 10,
        max = 1000,
        value = 100
      )
    ),
    
    mainPanel(
      plotOutput(outputId = "scatter_plot")
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  
  output$scatter_plot <- renderPlot({
    x <- rnorm(input$num_points)
    y <- rnorm(input$num_points)
    plot(x, y, main = paste("Scatterplot with", input$num_points, "points"),
         xlab = "X", ylab = "Y", pch = 19, col = "steelblue")
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```

#### Code

```r
# Load the Shiny package
library(shiny)

# Define UI
ui <- fluidPage(
  
  titlePanel("Simple Shiny App"),
  
  sidebarLayout(
    sidebarPanel(
      sliderInput(
        inputId = "num_points",
        label = "Number of random points:",
        min = 10,
        max = 1000,
        value = 100
      )
    ),
    
    mainPanel(
      plotOutput(outputId = "scatter_plot")
    )
  )
)

# Define server logic
server <- function(input, output, session) {
  
  output$scatter_plot <- renderPlot({
    x <- rnorm(input$num_points)
    y <- rnorm(input$num_points)
    plot(x, y, main = paste("Scatterplot with", input$num_points, "points"),
         xlab = "X", ylab = "Y", pch = 19, col = "steelblue")
  })
}

# Run the app
shinyApp(ui = ui, server = server)
```
:::
:::
:::

------------------------------------------------------------------------

## Shiny Modules

Shiny best practice

Essentially the functions of Shiny

::::: columns
::: column
Pros:

-   Best practice
-   Breaks the app down into smaller segments
-   Permit collaboration
-   Colleagues can pick-up faster
-   Re-usable
-   Easy to test/de-bug

Cons:

-   Initial learning curve
-   Overly complex for smaller apps
-   Require good code management
-   Sharing reactive values between modules is more involved
:::

::: column
![](images/lego_titanic_instructions.jpg)
:::
:::::

------------------------------------------------------------------------

## My workflow

Start easy. Get it working. Finesse.

::::: columns
::: column
1.  Start in plain R
2.  Get this working as a mini app
3.  Finesse the app into Shiny modules
:::

::: column
![](images/shiny_modules_workflow.png){width="1071"}
:::
:::::

------------------------------------------------------------------------

## How to Build Shiny Modules

Allow you to box the UI and server code together into "mini apps" inside your main app. üì¶

Each module has:

#### Module UI function

```r
mod_plot_ui <- function(id) {
  ns <- NS(id)  # Namespace to avoid conflicts
  tagList(
    sliderInput(ns("slider"), "Choose a number:", min = 1, max = 100, value = 50),
    plotOutput(ns("plot"))
  )
}
```

#### Module Server function

```r
mod_plot_server <- function(id) {
  moduleServer(id, function(input, output, session) {
    output$plot <- renderPlot({
      hist(rnorm(input$slider))
    })
  })
}
```

------------------------------------------------------------------------

## How to Build Shiny Modules

Now use the modules in the typical Shiny layout:


:::::: {.columns}
::: {.column}
```r
# Main UI
ui <- fluidPage(
  mod_plot_ui("plot1")
)

# Main Server
server <- function(input, output, session) {
  mod_plot_server("plot1")
}

# Run the app
shinyApp(ui, server)
```
:::
::: {.column}
```{shinylive-r}
#| standalone: true
#| viewerHeight: 600

# UI module
mod_plot_ui <- function(id) {
  ns <- NS(id)  # Namespace to avoid conflicts
  tagList(
    sliderInput(ns("slider"), "Choose a number:", min = 1, max = 100, value = 50),
    plotOutput(ns("plot"))
  )
}

# Server module
mod_plot_server <- function(id) {
  moduleServer(id, function(input, output, session) {
    output$plot <- renderPlot({
      hist(rnorm(input$slider))
    })
  })
}

# Main UI
ui <- fluidPage(
  mod_plot_ui("plot1")
)

# Main Server
server <- function(input, output, session) {
  mod_plot_server("plot1")
}

# Run the app
shinyApp(ui, server)
```
:::
:::

------------------------------------------------------------------------

## LAIT's Model Modules

------------------------------------------------------------------------

## `{shinytest2}`

::: {.columns}
::: {.column}
I know we all test our functions, so why stop there?

-   Test the server
-   Test UI
-   Made easy with Shiny modules

![Running `shinytest::test_app()` in LAIT](images/lait_shinytest_pass.png){height="400px"}
:::
::: {.column}
:::{.panel-tabset}
#### Server Test
```r
# BDS_FilteredServer() --------------------------------------------------------
test_that("1. BDS_FilteredServer correctly filters bds_metrics", {
  # Simulate the app_inputs object with reactive values
  app_inputs <- shiny::reactiveValues(
    topic = reactive({
      "Economic Factors"
    }),
    indicator = reactive({
      "Percentage of children in low income families"
    })
  )

  shiny::testServer(BDS_FilteredServer, args = list(app_inputs, bds_metrics), {
    # Trigger the observeEvent by setting the indicator input
    session$flushReact()

    # Retrieve the filtered data
    filtered_data <- session$returned()

    # Expected result based on the mock data
    expected_data <- bds_metrics |>
      dplyr::filter(
        Topic == "Economic Factors",
        Measure == "Percentage of children in low income families"
      )

    # Test that the filtered data matches the expected result
    testthat::expect_equal(filtered_data, expected_data)
  })
})
```

#### UI Test
```r
# Start an app running
app <- AppDriver$new(
  name = "basic_load",
  height = 846,
  width = 1445,
  load_timeout = 100 * 1000,
  timeout = 60 * 1000,
  wait = TRUE,
  options = list(test.mode = TRUE),
  expect_values_screenshot_args = FALSE # Turn off as we don't need screenshots
)

# Wait until Shiny is not busy for 5ms so we know any processes are complete
app$wait_for_idle(5)

# Test that the app will start up without error
# Checks that the title is as expected
testthat::test_that("App loads and title of app appears as expected", {
  testthat::expect_equal(
    app$get_text("title"),
    # This is the title of the app on load, you should change to match your app's title
    # The app title is usually set early on in the ui.R script or through a variable in the global.R script
    paste0(
      "Local Authority Interactive Tool (LAIT) - LA Level: ",
      "Barking and Dagenham, A level cohort Average point score per entry"
    )
  )
})

app$stop()
```
:::
:::
:::

------------------------------------------------------------------------

## DfE's `shiny-template`

Out-the-box GOV.UK styled Shiny app.

::: {.columns}
::: {.column}
-   Professional aesthetic
-   Users trust and are familiar with the UI
-   Meets accessibility standards
-   Continuously improved

[https://github.com/dfe-analytical-services/shiny-template](https://github.com/dfe-analytical-services/shiny-template)
:::
::: {.column}
![](images/shiny-template.png)
:::
:::

------------------------------------------------------------------------

## `{shinyGovstyle}` and `{dfeshiny}`

GOV.UK styled UI elements and helpful functions to handle Shiny housekeeping

-   Notifications and Tags
-   Cookies and Accessibility note
-   {bslib} for slick web design

TODO: Pick out some nice examples of these packages (LAIT related?)

------------------------------------------------------------------------

## `{afcharts}` and `{ggiraph}`

Combine Analysis Function approved charts with an accessible **interactive** charting framework

TODO: Pick out some nice examples of these packages (LAIT related?)

------------------------------------------------------------------------

## {dfeR}

A host of handy functions managed by DfE analysts

-   Up-to-date geographies
-   Prettying numbers
-   Create R projects pre-populated with best practice structure all the necessary files

TODO: Pick out some nice examples of these packages (LAIT related?)

------------------------------------------------------------------------

## Useful guidance

-   Analysis Function Guidance Hub
-   Engineering Production Grade Shiny Apps
-   AI
-   Appsilon
-   Take inspiration from other apps

TODO: Add links + more?

------------------------------------------------------------------------

## Reactivity Spaghetti Junction

Reactive objects are the drivers of interactivity in Shiny

However, as your apps get more complex reactivity can become a headache

Especially when multiple inputs can update each other, leads to endless loops

TODO: Add LAIT example/ how you can combat this?

------------------------------------------------------------------------

## FUNctionality - Sky's the Limit

Coding is just really problem solving. Like LEGO you can build anything you put your mind to.

:::::: columns
:::: column
**Copy-to-clipboard**

::: panel-tabset
#### JS

``` js
$(document).ready(function () {
  // General function to handle image copying
  async function copyImage(namespace) {
    const buttonId = `#${namespace}-copybtn`;
    const imageContainerId = `#${namespace}-copy_plot`;

    const src = $(`${imageContainerId}>img`).attr("src");
    if (!src) {
      alert("No image source found!");
      return;
    }
    try {
      const blob = await getImageBlobFromUrl(src);
      await navigator.clipboard.write([
        new ClipboardItem({
          [blob.type]: blob
        })
      ]);
      Shiny.setInputValue("copy-to-clipboard-success", true, {priority: "event"});
    } catch (err) {
      console.error(err.name, err.message);
      Shiny.setInputValue("copy-to-clipboard-failure", true, {priority: "event"});
    }
  }
```

#### Demo

![](images/lait_copy_to_clipboard.mp4)
:::
::::

::: column
**Create Your Own**

![](images/create_your_own.png)

TODO: Add a video of the Create Your Own page
:::
::::::

------------------------------------------------------------------------

## Shout, Shout, Let It All Out {.center}

::::: columns
::: column
Deployment and User Testing
:::

::: column
![These are the things we CAN'T live without üé∂](images/shout-single.jpg)
:::
:::::

::: notes
-   Now you have an app that works, serves the use case and you are proud of.
-   But how to share this with your users!?
-   Before live deploying we must do user testing... but this comes hand-in-hand with deployment.
-   Must identify what needs the app has for deployment and hosting.
    -   Internal Vs External
    -   Number of users and size of the app
    -   Cost
-   Test early so that pick-up any issues before they become major headaches.
-   Then continue to test throughout development - idea of Continuous Integration.
:::

------------------------------------------------------------------------

## Deployment Options

The solution to your deployment dilemma depends upon your audience (and access):

|              | Paid          | Cheaper          | Free (with limitations)        |
|----------------|----------------|----------------|------------------------|
| **Internal** | Posit Connect | Internal servers | Docker                         |
| **External** | Shinyapps.io  | Internal servers | GitHub / Shinyapps.io / Docker |

TODO: Check these options are correct and complete

------------------------------------------------------------------------

## Continuous Integration

Practice of merging code into the test/live area regularly. Helps detect and resolve issues early, leading to faster development and higher quality.

Examples of CI:

-   Git Hooks
-   Automated linting
-   Automated tests
-   Immediate build and deployment

CI is setup using `.yaml` files and harnessing automated workflows like GitHub Actions.

TODO: Add the LAIT .yaml file and explain how it works?

------------------------------------------------------------------------

## User Testing

Absolutely crucial. Should be done ASAP and throughout.

But... I see "user testing" as including anyone from a team member, non-technical colleague to external users.

Produce and use MVPs to do this (in a workshop or even over the shoulder).

Try and do at least one round of user testing on your expected cohort. Use surveys to collect feedback, leave questions open ended and be ready to get little feedback.

TODO: Display the LAIT user testing + feedback?

------------------------------------------------------------------------

## Knight In Shining Armour

You've done it...

-   Investigated and confirmed the need for a Shiny app.
-   Sketched out maps to plan your development and guide timelines/milestones.
-   Used Shiny best practice to build a modular structure.
-   Harnessed the government Shiny frameworks to produce GOV.UK accessible content.
-   Ensured the user's experience is stress free with custom functions, available R packages and seamless interactivity.
-   Designed and executed cool new functionality which warrants the use of Shiny and shows off your coding and creativity.
-   Chosen the right method to deploy.
-   Engaged with users throughout, adjusting content on the go.

... successfully and skillfully developed, deployed (and will maintain) an excellent, accessible, sustainable Shiny app.

TODO: Add the emojis

------------------------------------------------------------------------

## Useful Links

-   https://user-guidance.analytical-platform.service.justice.gov.uk/apps/rshiny-app.html#overview

TODO: Add links